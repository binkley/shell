#!/usr/bin/env bash

export PS4='+${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): } '
set -e
set -o pipefail

trap 'r=$? ; (( 0 == $r )) || echo "$0: Failed" ; exit $r' EXIT

function usage {
    echo "Usage: $0 <init|test|accept>"
}

function help {
    usage
}

function required {
    cat >&2 <<EOM
$0: Missing git config: $1
Try \`git config --local $1 <value>\` to set $1 for this repository.
EOM
    exit 2
}

function config {
    local opts=(--get)
    while (( 0 < $# ))
    do
        case $1 in
            --bool ) opts=("${opts[@]}" $1) ; shift ;;
            -* ) echo "$0: BUG" >&2 ; exit 3 ;;
            * ) break ;;
        esac
    done
    local config=tdd.$1
    git config "${opts[@]}" $config 2>/dev/null || echo "${2-required $config}"
}

function tdd-notes {
    git notes --ref=tdd "$@"
}

function test-number {
    git log -1 --show-notes=tdd --format=%N 2>/dev/null \
        | sed '/^$/d'
}

function show-config {
    local initial="$1"
    cat <<EOM
Initial commit message (git config tdd.initMessage): $initial
Pull before test (git config tdd.pullBeforeTest): true
Test command (git config --local tdd.testCommand): $(config testCommand)
Accept command (git config --local tdd.acceptCommand): $(config acceptCommand)
EOM
}

function init {
    while (( 0 < $# ))
    do
        case $1 in
            --help ) usage ; exit 0 ;;
            * ) usage >&2 ; exit 2 ;;
        esac
    done
    if [[ -n "$(test-number)" ]]
    then
        echo "$0: TDD already initialized" >&2
        exit 2
    fi
    initial="$(config initMessage WIP)"
    if ${FIRST_TIME-true}
    then
        show-config "$initial"
        git stash 2>/dev/null
        git commit --allow-empty -m "$initial"
        git stash pop 2>/dev/null || true
    else
        git commit --allow-empty -m "$initial"
    fi
    tdd-notes add -m 0
}

function test {
    while (( 0 < $# ))
    do
        case $1 in
            --help ) usage ; exit 0 ;;
            * ) usage >&2 ; exit 2 ;;
        esac
    done
    if $(config --bool pullBeforeTest true)
    then
        # Support older git without `git pull --autostash`
        # See http://stackoverflow.com/questions/30208928/can-git-pull-automatically-stash-and-pop-pending-changes
        # TODO: Support even older git (see http://stackoverflow.com/a/31575425)
        git -c rebase.autoStash=true pull --rebase
    fi
    $(config testCommand)
    next=$(( $(test-number) + 1 ))
    git commit -a --amend --no-edit --allow-empty
    # TODO: Cannot distinguish 'Overwriting existing notes' from real error
    tdd-notes add -f -m $next 2>/dev/null
}

function accept {
    while (( 0 < $# ))
    do
        case $1 in
            --help ) usage ; exit 0 ;;
            -m ) local message="$2" ; shift 2 ;;
            * ) usage >&2 ; exit 2 ;;
        esac
    done
    $(config acceptCommand)
    if [[ -n "$message" ]]
    then
        git commit -a --amend -m "$message"
    else
        git commit -a --amend
    fi
    # NB -- the commit also removes the notes -- why?
    git push
    FIRST_TIME=false init
}

while (( 0 < $# ))
do
    case $1 in
        --help ) exec man ${0##*/} ;;
        -* ) usage >&2 ; exit 2 ;;
        * ) break ;;
    esac
done

case $# in
    0 ) usage >&2 ; exit 2 ;;
esac

case $1 in
    init | test | accept | test-number ) "$@" ;;
    * ) usage >&2 ; exit 2 ;;
esac
