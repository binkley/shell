#!/bin/bash

shopt -s nocasematch

command -v curl >/dev/null 2>&1 || {
    echo "$0: curl: command not found" >&2
    exit 127
}

command -v jq >/dev/null 2>&1 || {
    echo "$0: jq: command not found" >&2
    exit 127
}

export PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}():} '

set -e
set -o pipefail

function print-help {
    cat <<EOH
Usage: $0 [CURL-OPTION]... CURL-ARG... [-- [JQ-OPTION]... [JQ-ARG]...]
Fetches a URL with \`curl' and processes the output with \`jq'.

Options:
 -h, --help    Prints help and exits, including help for \`curl' and \`jq'
 -g, --debug   Debugs this script; use a second time to trace (to use the
                  \`-g' flag for \`curl', use \`--globoff')

EOH
    curl --help
    echo
    jq --help | sed 's/^\t//'
}

function dump-args {
    printf "\e[3m"
    cat <<EOD
head_args: $head_args
curl_args: ${curl_args[@]}
jq_args: ${jq_args[@]}

EOD
    printf "\e[0m"
}

let debug=0 || true
curl_args=()
for arg
do
    case "$arg" in
    -- ) shift ; break ;;
    -h | --help ) print-help ; exit 0 ;;
    -g | --debug ) let ++debug ; shift ;;
    * ) curl_args=("${curl_args[@]}" "$arg") ; shift ;;
    esac
done
head_args=-D-
for curl_arg in "${curl_args[@]}"
do
    case "$curl_arg" in
    -I | --head ) head_args= ;;
    esac
done

jq_args=("${@-.}")

case $debug in
0 ) debug=false ;;
1 ) debug=true ; dump-args >&2 ;;
* ) debug=true ; dump-args >&2 ; set -x ;;
esac

# TODO: Heuristic, need to parse JQ args for options
color=false
[[ -t 1 ]] && color=true
[[ "${jq_args[@]}" =~ -([a-z][A-Z])*C([a-z][A-Z])* ]] && color=true
[[ "${jq_args[@]}" =~ -([a-z][A-Z])*M([a-z][A-Z])* ]] && color=false

curl -s $head_args "${curl_args[@]}" | tr -d '\r' | {
    json=false
    first=$color
    shopt -s nocasematch
    while read line
    do
        $first && {
            first=false
            case "$line" in
                *" 2"?? ) printf "\e[1m$line\e[0m\n" "$line" ;;
                *" 3"?? ) printf "\e[1;33m$line\e[0m\n" "$line" ;;
                *" 4"?? | *" 5"?? ) printf "\e[1;31m$line\e[0m\n" "$line" ;;
                * ) printf "\e[1;35m$line\e[0m\n" "$line" ;;
            esac
            continue
        }
        [[ -z "$line" ]] && { echo ; break ; }
        [[ "$line" =~ ^Content-Type:.*json.* ]] && json=true
        printf "%s\n" "$line"
    done

    if $json
    then
        jq -C "${jq_args[@]}"
    else
        if ((0 < $#))
        then
            echo "$0: jq arguments for non-JSON response: ${jq_args[@]}" >&2
            exit 2
        fi

        cat
    fi
}
